extend class StatusBarScreen
{ 
	static void DrawRotatedImage(String graphic, vector2 pos, double rotation = 0, Vector2 scale = (1, 1), double Alpha = 1., int flags = 0, vector2 texoffs = (0,0), Color tint=Color(0,0,0,0), bool animated = false, bool absolute=false)
	{
		TextureID texture = TexMan.CheckForTexture(graphic, TexMan.Type_Any);		
		vector2 texsize;
		[texsize.x, texsize.y] = TexMan.GetSize(texture);
		vector2 resolution = (Screen.GetWidth(), Screen.GetHeight());
		vector2 scaleratio = (resolution.x/GetBaseWidth(), resolution.y/GetBaseHeight());
		vector2 nscale = (scale.x*scaleratio.x, scale.y*scaleratio.x);
		
		pos.y *= GetStatusBarHeightRatio();
		vector2 npos = _ProcessTextureCoords(pos, (0,0), flags, texture, nscale);
		npos.x *= scaleratio.x;
		npos.y *= scaleratio.y;
		
		Shape2D surface = MakeSquare();
		MoveSquare(surface, (nscale.x*texsize.x,nscale.y*texsize.y), npos, rotation, texoffs);
		
		DrawShape(texture, surface, animated, alpha, tint);
	}

	// -- Credits: Marisa Kirisame - //
	static clearscope Shape2D MakeSquare()
	{
		// the shape that will be drawn
		Shape2D square = new("Shape2D");
		// texture coordinates of each corner
		square.PushCoord((0,0));
		square.PushCoord((1,0));
		square.PushCoord((0,1));
		square.PushCoord((1,1));
		// two triangles make up the square
		// the points have to be in counter-clockwise order
		square.PushTriangle(0,3,1);
		square.PushTriangle(0,2,3);
		return square;
	}

	// set the positions of an existing square shape's vertices
	static clearscope void MoveSquare( Shape2D shape, Vector2 size, Vector2 pos, double angle, vector2 centerpos = (0,0) )
	{
		// clear any vertices already set
		shape.Clear(Shape2D.C_Verts);
		// corners of a square centered on 0,0
		Vector2 points[4];
		points[0] = (-0.5*size.x,-0.5*size.y);
		points[1] = ( 0.5*size.x,-0.5*size.y);
		points[2] = (-0.5*size.x, 0.5*size.y);
		points[3] = ( 0.5*size.x, 0.5*size.y);
		for ( int i=0; i<4; i++ )
		{
			Vector2 oldpos = points[i];
			vector2 origin = ( 
				centerpos.x*cos(angle)-centerpos.y*sin(angle),
				centerpos.x*sin(angle)+centerpos.y*cos(angle)
			);
			points[i].x = origin.x+(oldpos.x*cos(angle)-oldpos.y*sin(angle)) + pos.x;
			points[i].y = origin.y+(oldpos.x*sin(angle)+oldpos.y*cos(angle)) + pos.y;
			shape.PushVertex(points[i]);
		}
	}
	// ---- //
}