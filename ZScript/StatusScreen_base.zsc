const statscr_base_width = 1920.0;
const statscr_base_height = 1080.0;

class StatusBarScreen Abstract ui
{
	enum AlignFlags
	{
		SS_SCREEN_CENTER		= 0x1,
		SS_SCREEN_TOP_CENTER	= 0x2,
		SS_SCREEN_BOTTOM_CENTER	= 0x4,
		SS_SCREEN_TOP_LEFT		= 0x8,
		SS_SCREEN_BOTTOM_LEFT	= 0x10,
		SS_SCREEN_TOP_RIGHT		= 0x20,
		SS_SCREEN_BOTTOM_RIGHT	= 0x40,
		SS_COORDS_TEXGRID		= 0x80
	};

	static vector2 _ProcessCoords(vector2 pos, uint flags)
	{
		vector2 center			= (statscr_base_width/2., statscr_base_height/2.);
		vector2 top_center		= (statscr_base_width/2., 0);
		vector2 bottom_center	= (statscr_base_width/2., statscr_base_height);
		vector2 top_right		= (statscr_base_width, 0);
		vector2 bottom_right	= (statscr_base_width, statscr_base_height);
		vector2 bottom_left		= (0, statscr_base_height);
			
		if(flags & SS_SCREEN_CENTER       ) return center		+pos;
		if(flags & SS_SCREEN_TOP_CENTER   ) return top_center	+pos;
		if(flags & SS_SCREEN_BOTTOM_CENTER) return bottom_center+pos;
		if(flags & SS_SCREEN_BOTTOM_LEFT  ) return bottom_left  +pos;
		if(flags & SS_SCREEN_TOP_RIGHT    ) return top_right	+pos;
		if(flags & SS_SCREEN_BOTTOM_RIGHT ) return bottom_right +pos;
		return pos;
	}

	static vector2 _ProcessTextureCoords(vector2 pos, uint flags, TextureID texture)
	{
		vector2 texsize;
		[texsize.x, texsize.y] = TexMan.GetSize(texture);
		
		if(flags & SS_COORDS_TEXGRID)
		{
			pos.x = pos.x*texsize.x;
			pos.y = pos.y*texsize.y;
		}
		pos.x -= texsize.x/2.;
		pos.y -= texsize.y/2.;
		
		return _ProcessCoords(pos, flags);
	}
	
	static void DrawTexture(TextureID texture, Vector2 pos, int flags = 0, double Alpha = 1., Vector2 scale = (1, 1))
	{
		vector2 texsize;
		[texsize.x, texsize.y] = TexMan.GetSize(texture);

		vector2 npos = _ProcessTextureCoords(pos, flags, texture);

		Screen.DrawTexture(texture, false, npos.x, npos.y,
			DTA_VirtualWidthF, statscr_base_width,
			DTA_VirtualHeightF, statscr_base_height,
			DTA_KeepRatio, true,
			DTA_Alpha, alpha,
			DTA_DestWidth, int(texsize.x*scale.x),
			DTA_DestHeight, int(texsize.y*scale.y)
		);
	}

	static void DrawImage(String graphic, Vector2 pos, int flags = 0, double Alpha = 1., Vector2 scale = (1, 1))
	{
		TextureID texture = TexMan.CheckForTexture(graphic, TexMan.Type_Any);
		DrawTexture(texture, pos, flags, alpha, scale);
	}
	
	static void DrawString(Font fnt, String str, Vector2 pos, int flags = 0, int translation = Font.CR_UNTRANSLATED, double Alpha = 1., Vector2 scale = (1, 1), int linespacing = 20)
	{
		Array<String> lines;
		str.Split(lines, "\n");
		vector2 npos = _ProcessCoords(pos, flags);
		
		for(int i = 0; i < lines.Size(); i++)
		{
			 float lineoffs = (linespacing*i);
			 Screen.DrawText(fnt, translation, npos.x, npos.y+lineoffs, 
				lines[i],
				DTA_VirtualWidthF,  int(statscr_base_width*(1./scale.x*0.5)),
				DTA_VirtualHeightF, int(statscr_base_height*(1./scale.y*0.5)),
				DTA_KeepRatio, true,
				DTA_Alpha, alpha
			);
		}		
	}
	
	static void Fill(Color col, double x, double y, double w, double h, int flags = 0)
	{
		vector2 pos = (x, y);
		float sc_xres = Screen.getWidth()/statscr_base_width;
		float sc_yres = Screen.getHeight()/statscr_base_height;		
		vector2 npos = _ProcessCoords(pos, flags);
		npos.x *= sc_xres;
		npos.y *= sc_yres;
		w *= sc_xres;
		h *= sc_yres;
		
		Screen.Dim(col, 1.0, npos.x, npos.y, w, h);
	}
	
	static void SetClipRect(int x, int y, int w, int h)
	{
		float sc_xres = Screen.getWidth()/statscr_base_width;
		float sc_yres = Screen.getHeight()/statscr_base_height;		
		x *= sc_xres;
		y *= sc_yres;
		w *= sc_xres;
		h *= sc_yres;
		Screen.SetClipRect(x,y,w,h);
	}
	
	static void ClearClipRect() { Screen.ClearClipRect(); }
}	