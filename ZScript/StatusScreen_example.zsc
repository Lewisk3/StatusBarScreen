class StatusScreen_RenderEVH : EventHandler
{
	Actor aim_enemy;
	ui double hpcounter;
	double rotation;
	double scaleflip;
	float hit_fade;
	float twolf_hue;

	override void WorldThingDamaged(WorldEvent e)
	{
		// Turn on hitmarker if an enemy is damaged
		if(e.Thing && e.Thing.bISMONSTER) hit_fade = 1.0;
	}
	
	override void WorldTick()
	{
		// Get target under aim.
		let plr = players[consoleplayer].mo;
		if(plr) aim_enemy = plr.AimTarget();
		
		// Handles hitmarker alpha and timberwolf RGB cycle.
		if(hit_fade > 0) hit_fade *= 0.85;
		
		twolf_hue += 0.01;
		rotation += 1;
		scaleflip -= 0.02;
		if(scaleflip < -1) scaleflip = 1.0;
		if(twolf_hue > 2.0) twolf_hue = 0;
	}

	override void RenderOverlay(RenderEvent e)
	{
		// Draw simple elements
		// The SS_COORDS_TEXGRID flag multiplies the X/Y coords by the image size.
		// Images are drawn relative to their center, not their upperleft most pixel
		StatusBarScreen.DrawImage("Radar",(0.5,0.60), StatusBarScreen.SS_COORDS_TEXGRID);
		
		// Draw hitmarker
		StatusBarScreen.DrawImage (	
			"HITMARK", 
			(0,0), 
			StatusBarScreen.SS_COORDS_TEXGRID | StatusBarScreen.SS_SCREEN_CENTER,
			hit_fade, scale:(1.2,1.2) 
		);
		
		// Draw mugshot
		StatusBarScreen.DrawMugshot(5,(0.75,-1.25),StatusBarScreen.SS_COORDS_TEXGRID | StatusBarScreen.SS_SCREEN_BOTTOM_LEFT);
		
		// Draw timberwolf
		uint twolf_flags = StatusBarScreen.SS_COORDS_TEXGRID | StatusBarScreen.SS_SCREEN_BOTTOM_CENTER;
		StatusBarScreen.DrawImage (
				"ICON", (0,-0.5), 
				twolf_flags,
				scale:(1.0*scaleflip, 1.0), e.Camera.angle-90,
				tint:StatusColor.HSLToRGB(twolf_hue, 1.0, 0.5),
				texoffs:(1.0,1.0),
				rotoffs:(1.0,1.0)
		);
				
		// Draw Radar around Camera (player)
		vector2 rpos = StatusBarScreen.GetImageSize("Radar");
		DrawRadar(e.Camera, (rpos.x*0.5, rpos.y*0.6) );
		
		// Draw HUD projections
		if(aim_enemy)
		{
			bool infront;
			ViewProjection viewproj = StatusBarScreen.GetRenderEventViewProj(e);
			
			vector2 apos, bpos, cpos, dpos;
			
			[infront, apos] = StatusBarScreen.GetActorHUDPos (
				viewproj,
				aim_enemy, aim_enemy.radius, 0, aim_enemy.height
			);	
			[infront, bpos] = StatusBarScreen.GetActorHUDPos (
				viewproj,
				aim_enemy, -aim_enemy.radius, 0, aim_enemy.height
			);	
			[infront, cpos] = StatusBarScreen.GetActorHUDPos (
				viewproj,
				aim_enemy, aim_enemy.radius, 0, 0
			);	
			[infront, dpos] = StatusBarScreen.GetActorHUDPos (
				viewproj,
				aim_enemy, -aim_enemy.radius, 0, 0
			);	
			
			if(infront) 
			{
				StatusBarScreen.DrawImage("RETCA0", apos, scale:(1.0,1.0), texoffs:(0,1), absolute:true);
				StatusBarScreen.DrawImage("RETCB0", bpos, scale:(1.0,1.0), absolute:true);
				StatusBarScreen.DrawImage("RETCC0", cpos, scale:(1.0,1.0), texoffs:(0,1), absolute:true);
				StatusBarScreen.DrawImage("RETCD0", dpos, scale:(1.0,1.0), absolute:true);
				
				StatusBarScreen.DrawString3D("smallfont", 
					aim_enemy.GetClassName(), 
					apos, 0, 
					Font.CR_GRAY, 
					scale:(1.5,1.5),
					distance: e.Camera.Distance2D(aim_enemy)
				);
			}
		}
	}
	
	ui void DrawRadar(Actor mid, vector2 radarpos)
	{
		if(!mid) return;
		float scale = 7;
		ThinkerIterator act_it = ThinkerIterator.Create("Actor");
		Actor obj;
							
		while(obj = Actor(act_it.Next()))
		{
			// Simple Radar Display
			// Find actors with-in 135*scale units, rotate their coords around the player.
			int x = mid.pos.x - obj.pos.x;
			int y = mid.pos.y - obj.pos.y;
			int dis = ceil(mid.Distance3D(obj)/scale);
			if( dis < 135 )
			{
				float frontangle = mid.angle+180;
				int dx = ( y * cos((frontangle) )) - ( x * sin((frontangle)) );
				int dy = ( y * sin((frontangle) )) + ( x * cos((frontangle)) );
				dx /= scale;
				dy /= scale;
				if( obj != mid && obj.target && obj.bSOLID && obj.bSHOOTABLE )
					StatusBarScreen.DrawImage("ENEMYIND",(radarpos.x-dx,radarpos.y-dy));
			}
		}
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		let plr = e.Camera;
		if(plr)
		{
			// Interpolate health counter.
			if(hpcounter != plr.health) hpcounter = (0.95 * hpcounter) + (0.05 * plr.health);
			
			// Draw a bar whose length depends on the players health.
			float hpratio = (float(hpcounter)/plr.Spawnhealth());
			StatusBarScreen.Fill (
				Color(255,255-int(hpratio*255),0,255*int(hpratio*255)),
				1920-(1920*hpratio),0,
				1920,25
			);
			
			// Color for drawing the healthbar, 0.28 is used here because a hue of 0.28 is bright green.
			// It's really useful when wanting to fade to red as 0 hue is red.
			// We're passing an alpha of 0.4 here because 1.0 will tint the font too heavily, removing detail.
			Color hpcolor = StatusColor.HSLtoRGB(0.28*hpratio,1.0,0.5, 0.4);
			StatusBarScreen.DrawString ( 
					"bigfont",
					String.Format("Health %d%%",ceil(hpratio*100)), (-75,0), 
					StatusBarScreen.SS_SCREEN_TOP_CENTER, Font.CR_WHITE, 
					tint:hpcolor
			);
		}
	}
}